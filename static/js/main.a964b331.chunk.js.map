{"version":3,"sources":["reportWebVitals.js","components/AppRouter/AppRouter.js","components/Sidebar/Sidebar.style.js","components/Sidebar/Sidebar.js","components/Sidebar/index.js","store/actionTypes.js","store/actions/gamesList.js","components/layouts/MainLayout.js","store/actions/favorites.js","views/Home/Home.style.js","components/GemeItem/GameItem.style.js","components/GemeItem/GameItem.js","components/GemeItem/index.js","views/Home/Home.js","views/Home/index.js","routers.js","store/reducers/GamesReducer.js","store/reducers/FavoritesReducer.js","store/reducers/rootReducer.js","store/store.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AppRouter","layout","component","res","Layout","Component","render","props","useStyles","makeStyles","root","width","height","window","innerHeight","marginTop","searchbar","background","borderRadius","margin","favorites","color","textDecoration","minWidth","categories","Sidebar","connect","state","games","gameInfo","isLoading","is_loading","gameIds","classes","useState","searchedGame","setSearchedGame","Paper","className","MenuList","action","MenuItem","InputBase","input","placeholder","inputProps","value","onChange","e","target","handleSearchChange","IconButton","type","iconButton","aria-label","map","category","to","nameKey","ListItemIcon","fontSize","Typography","variant","uuid","noWrap","length","ACTION_TYPES","gamesDataLoading","_","dispatch","setGamesData","data","payload","setFavorites","setFavoritesData","setSearchedData","search","useParams","location","useLocation","useEffect","localStorage","getItem","JSON","parse","setItem","stringify","console","log","fetch","origin","headers","json","pathname","catch","err","Grid","container","children","homeContainer","flex","marginLeft","marginRight","display","alignItems","padding","flexDirection","large","flexWrap","singlelarge","gameLargeImg","flexGrow","border","boxSizing","small","gameSmallImg","gameName","position","bottom","left","maxWidth","top","right","opacity","cursor","smallImgWrapper","largeImgWrapper","favoriteIcon","filteredClass","GameItem","toggleFavorite","id","wrapperClass","isLarge","game","alt","name","src","img","includes","onClick","Home","singlelargeWrapper","Routers","exact","path","MainLayout","initialState","rootReducer","combineReducers","categoryName","filter","cat","item","gameData","largeGames","smallGames","forEach","push","allData","favData","favCategory","favGames","favLargeGames","favSmallGames","favCategories","searchedData","searchedCategory","searchedGames","toLowerCase","indexOf","searchLargeGames","searchSmallGames","searchedCategories","gameId","game_id","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"sLAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,+DCJDQ,EAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,UAAcC,EAAS,iBAEjDC,EAAsBH,EAAdI,EAAsBH,EAErC,OACE,cAAC,IAAD,2BACMC,GADN,IAEEG,OAAQ,SAAAC,GAAK,OACX,cAACH,EAAD,UACE,cAACC,EAAD,eAAeE,W,4ICVZC,EAAYC,YAAW,CAChCC,KAAM,CACFC,MAAO,IACPC,OAAQC,OAAOC,YACfC,UAAU,GACV,2CAA4C,CAC1CJ,MAAO,SAGT,2CAA4C,CAC1CA,MAAO,OACPC,OAAQ,UAIZI,UAAW,CACTC,WAAY,YACZC,aAAc,GACdN,OAAQ,GACRO,OAAQ,GACR,sBAAuB,CACrB,2CAA4C,CACxCR,MAAO,UAIfS,UAAW,CACLC,MAAO,UACPC,eAAgB,OAChB,0BAA2B,CACvBC,SAAS,KAGnBC,WAAY,CACNH,MAAO,UACPC,eAAgB,OAChB,0BAA2B,CACvBC,SAAS,O,iBCqCzB,IC1EeE,EDiFAC,aAPS,SAAAC,GAAK,MAAK,CAC9BC,MAAOD,EAAME,SAASD,MACtBJ,WAAYG,EAAME,SAASL,WAC3BM,UAAWH,EAAME,SAASE,WAC1BX,UAAWO,EAAMP,UAAUY,WAGhBN,EAnEf,SAAiBnB,GAEf,IAAM0B,EAAUzB,IAEhB,EAAwC0B,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAMA,OACE,cAACC,EAAA,EAAD,CAAOC,UAAWL,EAAQvB,KAA1B,SACI,eAAC6B,EAAA,EAAD,WACI,sBAAMC,OAAM,kBAAaL,GAAzB,SACA,eAACM,EAAA,EAAD,CAAUH,UAAWL,EAAQjB,UAA7B,UACI,cAAC0B,EAAA,EAAD,CACIJ,UAAWL,EAAQU,MACnBC,YAAY,eACZC,WAAY,CAAE,aAAc,gBAC5BC,MAAOX,EACPY,SAAU,SAAAC,GAAC,OAdF,SAAAA,GACzBZ,EAAgBY,EAAEC,OAAOH,OAaMI,CAAmBF,MAEtC,cAACG,EAAA,EAAD,CACIC,KAAK,SACLd,UAAWL,EAAQoB,WACnBC,aAAW,SAHf,SAKI,cAAC,IAAD,WAIP/C,EAAMiB,WAAW+B,KAAI,SAAAC,GAAQ,OACzB,cAAC,IAAD,CACGC,GAAyB,cAArBD,EAASE,QAA0B,IAAnC,oBAAsDF,EAASE,SACnEpB,UAAS,UAAKL,EAAQT,WAAb,KAFZ,SAKA,eAACiB,EAAA,EAAD,WACI,cAACkB,EAAA,EAAD,UAC0B,cAArBH,EAASE,SAA2B,cAAC,IAAD,CAAcE,SAAS,QAAQvC,MAAM,cAE9E,cAACwC,EAAA,EAAD,CAAaC,QAAQ,UAArB,SAAgCN,EAASE,cANrCK,UAUb,cAAC,IAAD,CAAMN,GAAG,aAAanB,UAAWL,EAAQb,UAAzC,SACI,eAACqB,EAAA,EAAD,WACI,cAACkB,EAAA,EAAD,UACI,cAAC,IAAD,CAAcC,SAAS,QAAQvC,MAAM,gBAEzC,eAACwC,EAAA,EAAD,CAAaC,QAAQ,UAAUE,QAAM,EAArC,wBACgBzD,EAAMa,UAAU6C,OADhC,oBElEPC,EACW,qBADXA,EAEO,iBAFPA,EAGQ,kBAHRA,EAIM,gBAJNA,EAKW,qBALXA,EAMU,oBCJVC,EAAmB,SAAAC,GAAC,MAC7B,CACIhB,KAAMc,IC0Dd,I,EAYexC,eAZS,SAAAC,GAAK,sBACtBA,MAGoB,SAAA0C,GAAQ,MAAK,CACpCF,iBAAkB,kBAAME,EAASF,IACjCG,aAAc,SAACC,EAAMf,GAAP,OAAoBa,ED7DV,SAACE,EAAMf,GAAP,MACxB,CACIJ,KAAMc,EACNM,QAAS,CACLD,OACAf,aCwDmCc,CAAaC,EAAMf,KAC9DiB,aAAc,SAAAF,GAAI,OAAIF,ECnEE,SAAAE,GAAI,MAC5B,CACInB,KAAMc,EACNM,QAASD,GDgEkBE,CAAaF,KAC5CG,iBAAkB,SAACH,EAAMnD,GAAP,OAAqBiD,EDrDX,SAACE,EAAMnD,GAAP,MAC5B,CACIgC,KAAMc,EACNM,QAAS,CACLD,OACAnD,cCgDwCsD,CAAiBH,EAAMnD,IAAYA,WACnFuD,gBAAiB,SAACJ,EAAMK,GAAP,OAAkBP,ED5CR,SAACE,EAAMK,GAAP,MAC3B,CACIxB,KAAMc,EACNM,QAAS,CACLD,OACAK,WCuCoCD,CAAgBJ,EAAMK,QAGvDlD,EAjEf,SAAqBnB,GAEjB,MAA2BsE,cAApBD,EAAP,EAAOA,OAAQpB,EAAf,EAAeA,SAETsB,EAAWC,cAwCjB,OArCCC,qBAAU,SAAAZ,GACP,IAAIhD,EAAY6D,aAAaC,QAAQ,aACrC9D,EAAYA,EAAY+D,KAAKC,MAAMhE,GAAa,GAChDb,EAAMkE,aAAarD,KACrB,IAGF4D,qBAAU,SAAAZ,GACNa,aAAaI,QAAQ,YAAaF,KAAKG,UAAU/E,EAAMa,UAAUY,YAClE,CAACzB,EAAMa,UAAUY,UAEpBgD,qBAAU,WACNO,QAAQC,IAAIjF,EAAMa,UAAUY,SAGxByD,MAAM,GAAD,OAAI5E,OAAOiE,SAASY,OAApB,mBAA6C,CAC9CC,QAAU,CACN,eAAgB,mBAChB,OAAU,sBAGjBjG,MAAK,SAAAS,GAAG,OAAIA,EAAIyF,UAChBlG,MAAK,SAAAS,GACCyE,EACCrE,EAAMoE,gBAAgBxE,EAAKyE,GACE,eAAtBE,EAASe,SAChBtF,EAAMmE,iBAAiBvE,EAAKI,EAAMa,WAElCb,EAAM+D,aAAanE,EAAKqD,MAG/BsC,OAAM,SAAAC,GAAG,OAAIR,QAAQC,IAAIO,QAI/B,CAACjB,EAASe,SAAUtF,EAAMa,YAGzB,eAAC4E,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAAC,EAAD,IACC1F,EAAM2F,e,QEtDN1F,EAAYC,aAAU,GAC/B0F,cAAe,CACXC,KAAM,EACNC,WAAW,GACXC,YAAa,GACbC,QAAS,OACTxF,UAAU,GACVyF,WAAY,aACZvF,WAAY,UACZwF,QAAS,EACT,2CAA4C,CACxCC,cAAe,WAGvBC,MAAO,CACHhG,MAAO,MACP4F,QAAS,OACTC,WAAY,aACZI,SAAU,OACV,2CAA4C,CACxCjG,MAAO,SAGfkG,YAAa,CACTlG,MAAM,OAEVmG,aAAc,CACVnG,MAAO,yBACP4F,QAAS,QACTQ,SAAS,EACTC,OAAQ,oBACRC,UAAW,cAEfC,MAAO,CACHvG,MAAO,MACP4F,QAAS,OACTC,WAAY,aACZI,SAAU,OACV,2CAA4C,CACxCjG,MAAO,SAGfwG,aAAc,CACVZ,QAAS,QACTQ,SAAS,EACTC,OAAQ,oBACRC,UAAW,aACXtG,MAAO,0BAGXyG,SAAU,CACNC,SAAU,WACVC,OAAO,EACPjG,MAAO,QACPkG,KAAK,EACL3D,SAAU,KAvDiB,4BAyDlB,CACTyD,SAAU,aA1DiB,gCA4Dd,CACbA,SAAU,WACVG,SAAS,MACTT,SAAS,EACT,2CAA4C,CACxCS,SAAU,QACVjG,SAAU,MACVwF,SAAS,KAnEc,gCAsEd,CACbM,SAAU,WACV1G,MAAO,QAxEoB,6BA2EjB,CACV0G,SAAU,WACVI,IAAI,GACJC,MAAM,GACN/G,MAAM,GACNgH,QAAS,GACTC,OAAQ,UACR,UAAW,CACPD,QAAS,KAnFc,ICAtBnH,EAAYC,YAAW,CAChCkG,MAAO,CACHhG,MAAO,MACP4F,QAAS,OACTC,WAAY,aACZI,SAAU,OACV,2CAA4C,CACxCjG,MAAO,SAGfkG,YAAa,CACTlG,MAAM,MACN0G,SAAS,YAEbP,aAAc,CACVnG,MAAO,yBACP4F,QAAS,QACTQ,SAAS,EACTC,OAAQ,oBACRC,UAAW,cAEfC,MAAO,CACHvG,MAAO,MACP4F,QAAS,OACTC,WAAY,aACZI,SAAU,OACV,2CAA4C,CACxCjG,MAAO,SAGfwG,aAAc,CACVZ,QAAS,QACTQ,SAAS,EACTC,OAAQ,oBACRC,UAAW,aACXtG,MAAO,0BAGXyG,SAAU,CACNC,SAAU,WACVC,OAAO,EACPjG,MAAO,QACPkG,KAAK,EACL3D,SAAU,IAEdiE,gBAAiB,CACbR,SAAU,WACVG,SAAS,MACTT,SAAS,EACT,2CAA4C,CACxCS,SAAU,QACVjG,SAAU,MACVwF,SAAS,IAGjBe,gBAAiB,CACbT,SAAU,WACV1G,MAAO,OAGXoH,aAAc,CACVV,SAAU,WACVI,IAAI,GACJC,MAAM,GACN/G,MAAM,GACNgH,QAAS,GACTC,OAAQ,UACR,UAAW,CACPD,QAAS,IAGjBK,cAAe,CACXzG,SAAU,MACV8F,SAAU,WACVN,SAAS,KC5CjB,IC9BekB,EDuCAvG,aATS,SAAAC,GAAK,kCACtBA,GADsB,IAEzBP,UAAWO,EAAMP,eAGM,SAAAiD,GAAQ,MAAK,CACpC6D,eAAgB,SAAAC,GAAE,OAAI9D,EH9BI,SAAA8D,GAAE,MAC5B,CACI/E,KAAMc,EACNM,QAAS2D,GG2BkBD,CAAeC,QAGnCzG,EApCf,SAAmBnB,GACf,IAAO6H,EAA+B7H,EAA/B6H,aAAcC,EAAiB9H,EAAjB8H,QAASC,EAAQ/H,EAAR+H,KACxBrG,EAAUzB,IACVY,EAAYb,EAAMa,UAAUY,QAMlC,OACI,sBAAKM,UAAW8F,EAAhB,UACI,qBACI9F,UAAW+F,EAAUpG,EAAQ6E,aAAe7E,EAAQkF,aACpDoB,IAAKD,EAAKE,KACVC,IAAG,kBAAaJ,EAAUC,EAAKI,IAAI/B,MAAQ2B,EAAKI,IAAIxB,SACxD,sBAAM5E,UAAWL,EAAQmF,SAAzB,SAAoCkB,EAAKE,OACzC,qBACIlG,UAAWL,EAAQ8F,aACnBU,IAAG,wBAAmBrH,EAAUuH,SAASL,EAAKH,IAAM,4BAA8B,+BAClFI,IAAI,WACJK,QAAS,SAAAxE,GAAC,OAhBO+D,EAgBkBG,EAAKH,QAdhD5H,EAAM2H,eAAeC,GAFI,IAAAA,WEgCjC,ICvCeU,ED+CAnH,aARS,SAAAC,GAAK,MACzB,CACIC,MAAOD,EAAME,SAASD,MACtBJ,WAAYG,EAAME,SAASL,WAC3BM,UAAWH,EAAME,SAASE,cAInBL,EA3Cf,SAAenB,GAEX,IAAM0B,EAAUzB,IAEhB,OACI,qBAAK8B,UAAWL,EAAQkE,cAAxB,UACM5F,EAAMuB,WACJ,qCACI,qBAAKQ,UAAW/B,EAAMqB,MAAM+E,MAAM1C,OAAS,EAAIhC,EAAQ0E,MAAQ1E,EAAQ4E,YAAvE,SACKtG,EAAMqB,MAAM+E,MAAMpD,KAAI,SAAA+E,GAAI,OACvB,cAAC,EAAD,CAEIA,KAAMA,EACND,SAAS,EACTD,aAA2C,IAA7B7H,EAAMqB,MAAM+E,MAAM1C,OAAehC,EAAQ6G,mBAAqB7G,EAAQ6F,iBAH/E/D,YAQjB,qBAAKzB,UAAWL,EAAQiF,MAAxB,SACK3G,EAAMqB,MAAMsF,MAAM3D,KAAI,SAAA+E,GAAI,OACvB,cAAC,EAAD,CAEIA,KAAMA,EACND,SAAS,EACTD,aAAcnG,EAAQ4F,iBAHjB9D,oBEtBxBgF,EAAU,SAAA3E,GACnB,OACI,eAAC,IAAD,WACI,cAAC,EAAD,CAAW4E,OAAK,EAACC,KAAK,IAAIhJ,OAAQiJ,EAAYhJ,UAAW2I,IAEzD,cAAC,EAAD,CAAWI,KAAK,sBAAsBhJ,OAAQiJ,EAAYhJ,UAAW2I,IAErE,cAAC,EAAD,CAAWI,KAAK,kBAAkBhJ,OAAQiJ,EAAYhJ,UAAW2I,IAEjE,cAAC,EAAD,CAAWI,KAAK,aAAahJ,OAAQiJ,EAAYhJ,UAAW2I,Q,gBCb3DM,EAAe,CACxBpH,YAAY,EACZH,MAAO,GACPJ,WAAY,I,SCHH2H,GAAe,CACxBnH,QAAS,ICMEoH,GALKC,YAAgB,CAChCxH,SFGwB,WAAmC,IAAlCF,EAAiC,uDAAzBwH,EAAc3G,EAAW,uCAC1D,OAAOA,EAAOY,MACV,KAAKc,EACD,OAAO,2BACAvC,GADP,IAEII,YAAY,IAGpB,KAAKmC,EACD,IAAMK,EAAO/B,EAAOgC,QAAQD,KACtB+E,EAAe9G,EAAOgC,QAAQhB,SAAWhB,EAAOgC,QAAQhB,SAAU,YACxE,EAAmBe,EAAK/C,WAAW+H,QAAO,SAAAC,GAAG,OAAIA,EAAI9F,UAAY4F,KAAjE,mBAAO9F,EAAP,KAGM5B,EAAQ4B,EAAS5B,MAAM2B,KAAI,SAAAkG,GAC7B,MAAiBlF,EAAK3C,MAAM2H,QAAO,SAAAjB,GAAI,OACpCA,EAAKH,KAAOsB,EAAKtB,MADfuB,EAAL,oBAIA,OADAA,EAASjC,IAAMgC,EAAKhC,IACbiC,KAILC,EAAa,GACbC,EAAa,GACnBhI,EAAMiI,SAAQ,SAAAvB,GACPA,EAAKb,IACJkC,EAAWG,KAAKxB,GAEhBsB,EAAWE,KAAKxB,MAKxB,IAAM9G,EAAa+C,EAAK/C,WAAW+B,KAAI,SAAAiG,GAAG,MACtC,CACIrB,GAAIqB,EAAIrB,GACRzE,QAAS8F,EAAI9F,YAIrB,MAAO,CACH3B,YAAY,EACZH,MAAO,CACHsF,MAAO0C,EACPjD,MAAOgD,GAEXnI,aACAuI,QAASvH,EAAOgC,QAAQD,MAGhC,KAAKL,EACD,IAAM8F,EAAUxH,EAAOgC,QAAQD,KAC/B,EAAsByF,EAAQxI,WAAW+H,QAAO,SAAAC,GAAG,MAAoB,cAAhBA,EAAI9F,WAA3D,mBAAOuG,EAAP,KAGIC,EAAWD,EAAYrI,MAAM2B,KAAI,SAAAkG,GACjC,MAAiBO,EAAQpI,MAAM2H,QAAO,SAAAjB,GAAI,OACvCA,EAAKH,KAAOsB,EAAKtB,MADfuB,EAAL,oBAIA,OADAA,EAASjC,IAAMgC,EAAKhC,IACbiC,KAIXQ,EAAW1H,EAAOgC,QAAQpD,UAAUY,QAAQuB,KAAI,SAAA4E,GAC5C,MAAoB6B,EAAQpI,MAAM2H,QAAO,SAAAjB,GAAI,OAC7CA,EAAKH,KAAOA,KAEZ,OAHA,uBAOJ,IAAMgC,EAAgB,GAChBC,EAAgB,GACtBF,EAASL,SAAQ,SAAAvB,GACVA,EAAKb,IACJ0C,EAAcL,KAAKxB,GAEnB8B,EAAcN,KAAKxB,MAK3B,IAAM+B,EAAgBL,EAAQxI,WAAW+B,KAAI,SAAAiG,GAAG,MAC5C,CACIrB,GAAIqB,EAAIrB,GACRzE,QAAS8F,EAAI9F,YAIrB,MAAO,CACH3B,YAAY,EACZH,MAAO,CACHsF,MAAOkD,EACPzD,MAAOwD,GAEX3I,WAAY6I,EACZN,QAASvH,EAAOgC,QAAQD,MAEhC,KAAKL,EACD,IAAMoG,EAAe9H,EAAOgC,QAAQD,KACpCgB,QAAQC,IAAIhD,EAAOgC,QAAQrC,aAAc,IACzC,MAA2BmI,EAAa9I,WAAW+H,QAAO,SAAAC,GAAG,MAAoB,cAAhBA,EAAI9F,WAArE,mBAAO6G,EAAP,KAGIC,EAAgBD,EAAiB3I,MAAM2B,KAAI,SAAAkG,GAC3C,MAAiBa,EAAa1I,MAAM2H,QAAO,SAAAjB,GAAI,OAC5CA,EAAKH,KAAOsB,EAAKtB,MADfuB,EAAL,oBAIA,OADAA,EAASjC,IAAMgC,EAAKhC,IACbiC,KAGXc,EAAgBA,EAAcjB,QAAO,SAAAjB,GAAI,OAEqC,IAA1EA,EAAKE,KAAKiC,cAAcC,QAAQlI,EAAOgC,QAAQI,OAAO6F,kBAG1DlF,QAAQC,IAAIgF,EAAe,iBAoB3B,IAAMG,EAAmB,GACnBC,EAAmB,GACzBJ,EAAcX,SAAQ,SAAAvB,GACfA,EAAKb,IACJkD,EAAiBb,KAAKxB,GAEtBsC,EAAiBd,KAAKxB,MAK9B,IAAMuC,EAAqBP,EAAa9I,WAAW+B,KAAI,SAAAiG,GAAG,MACtD,CACIrB,GAAIqB,EAAIrB,GACRzE,QAAS8F,EAAI9F,YAIrB,MAAO,CACH3B,YAAY,EACZH,MAAO,CACHsF,MAAOyD,EACPhE,MAAOiE,GAEXpJ,WAAYqJ,EACZd,QAASvH,EAAOgC,QAAQD,MAEhC,QACI,OAAO5C,IEzKfP,UDA4B,WAAmC,IAAlCO,EAAiC,uDAAzBwH,GAAc3G,EAAW,uCAC9D,OAAOA,EAAOY,MACV,KAAKc,EACD,MAAO,CACHlC,QAASQ,EAAOgC,SAGxB,KAAKN,EAED,IAAM4G,EAAStI,EAAOgC,QAYtB,MAAO,CACHxC,QATDL,EAAMK,QAAQ2G,SAASmC,GAEPnJ,EAAMK,QAAQuH,QAAO,SAAAwB,GAAO,OAAIA,IAAYD,KAG/C,uBAAOnJ,EAAMK,SAAb,CAAsB8I,KAM1C,QACI,OAAOnJ,ME3BNqJ,GAAQC,YAAY7B,GAAa8B,YAAgBC,MCO9DC,IAAS9K,OACP,cAAC,IAAM+K,WAAP,UACE,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,IAAD,UACI,cAAC,EAAD,UAIRM,SAASC,eAAe,SAM1BhM,M","file":"static/js/main.a964b331.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport {Route} from \"react-router-dom\"\r\n\r\nexport const AppRouter = ({layout, component, ...res}) => {\r\n\r\n  const [Layout, Component] = [layout, component];\r\n\r\n  return (\r\n    <Route\r\n      {...res}\r\n      render={props => (\r\n        <Layout>\r\n          <Component {...props}/>\r\n        </Layout>\r\n      )}\r\n    />\r\n  )\r\n}\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    root: {\r\n        width: 300,\r\n        height: window.innerHeight,\r\n        marginTop:20,\r\n        '@media only screen and (max-width:600px)': {\r\n          width: '150px',\r\n          // height: '315px',\r\n        },\r\n        '@media only screen and (max-width:460px)': {\r\n          width: '100%',\r\n          height: '315px',\r\n        },\r\n      },\r\n      \r\n      searchbar: {\r\n        background: '#0000000a',\r\n        borderRadius: 12,\r\n        height: 44,\r\n        margin: 10,\r\n        '&.MuiInputBase-root': {\r\n          '@media only screen and (max-width:460px)': {\r\n              width: '100%',\r\n          },\r\n        }\r\n      },\r\n      favorites: {\r\n            color: '#535050',\r\n            textDecoration: 'none',\r\n            '& .MuiListItemIcon-root': {\r\n                minWidth:30\r\n            }\r\n      },\r\n      categories: {\r\n            color: '#535050',\r\n            textDecoration: 'none',\r\n            '& .MuiListItemIcon-root': {\r\n                minWidth:30\r\n            }\r\n      }\r\n})","import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport uuid from 'react-uuid';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport {useStyles} from './Sidebar.style'\r\nimport CategoryIcon from '@material-ui/icons/Category';\r\n\r\nfunction Sidebar(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [searchedGame, setSearchedGame] = useState('')\r\n\r\n  const handleSearchChange = e => {\r\n    setSearchedGame(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n        <MenuList>\r\n            <form action={`/search/${searchedGame}`}>\r\n            <MenuItem className={classes.searchbar}>\r\n                <InputBase\r\n                    className={classes.input}\r\n                    placeholder=\"Search Games\"\r\n                    inputProps={{ 'aria-label': 'search games' }}\r\n                    value={searchedGame}\r\n                    onChange={e => handleSearchChange(e)}\r\n                />\r\n                <IconButton \r\n                    type=\"submit\" \r\n                    className={classes.iconButton} \r\n                    aria-label=\"search\"\r\n                    >\r\n                    <SearchIcon  />\r\n                </IconButton>\r\n            </MenuItem >\r\n            </form>\r\n            {props.categories.map(category => (\r\n                 <Link \r\n                    to={category.nameKey === 'All games' ? '/' : `/category/${category.nameKey}`} \r\n                    className={`${classes.categories} ` } \r\n                    key={uuid()}\r\n                >\r\n                 <MenuItem>\r\n                     <ListItemIcon>\r\n                         {category.nameKey === 'All games' && <CategoryIcon fontSize=\"small\" color='primary' />}\r\n                     </ListItemIcon>\r\n                     <Typography  variant=\"inherit\">{category.nameKey}</Typography>\r\n                 </MenuItem>\r\n             </Link>\r\n            ))}\r\n            <Link to='/favorites' className={classes.favorites}>\r\n                <MenuItem >\r\n                    <ListItemIcon>\r\n                        <FavoriteIcon fontSize=\"small\" color='secondary'/>\r\n                    </ListItemIcon>\r\n                    <Typography  variant=\"inherit\" noWrap>\r\n                        Favorites ({props.favorites.length})\r\n                    </Typography>\r\n                </MenuItem>\r\n                </Link>\r\n        </MenuList>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    games: state.gameInfo.games,\r\n    categories: state.gameInfo.categories,\r\n    isLoading: state.gameInfo.is_loading,\r\n    favorites: state.favorites.gameIds\r\n});\r\n\r\nexport default connect(mapStateToProps)(Sidebar);\r\n","import Sidebar from './Sidebar';\r\n\r\nexport default Sidebar; ","export const ACTION_TYPES = {\r\n    GAMES_DATA_LOADING: 'GAMES_DATA_LOADING',\r\n    SET_GAMES_DATA: 'SET_GAMES_DATA',\r\n    TOGGLE_FAVORITE: 'TOGGLE_FAVORITE',\r\n    SET_FAVORITES: 'SET_FAVORITES',\r\n    SET_FAVORITES_DATA: 'SET_FAVORITES_DATA',\r\n    SET_SEARCHED_DATA: 'SET_SEARCHED_DATA'\r\n}","import {ACTION_TYPES} from '../actionTypes'\r\n\r\nexport const gamesDataLoading = _ => (\r\n    {\r\n        type: ACTION_TYPES.GAMES_DATA_LOADING\r\n    }\r\n)\r\nexport const setGamesData = (data, category) => (\r\n    {\r\n        type: ACTION_TYPES.SET_GAMES_DATA,\r\n        payload: {\r\n            data,\r\n            category\r\n        }\r\n    }\r\n)\r\n\r\nexport const setFavoritesData = (data, favorites) => (\r\n    {\r\n        type: ACTION_TYPES.SET_FAVORITES_DATA,\r\n        payload: {\r\n            data,\r\n            favorites\r\n        }\r\n    }\r\n)\r\n\r\nexport const setSearchedData = (data, search) => (\r\n    {\r\n        type: ACTION_TYPES.SET_SEARCHED_DATA,\r\n        payload: {\r\n            data,\r\n            search\r\n        }\r\n    }\r\n)","import React, {useEffect} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {useParams, useLocation } from 'react-router-dom';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Sidebar from '../Sidebar'\r\nimport {gamesDataLoading, setGamesData, setFavoritesData, setSearchedData} from '../../store/actions/gamesList'\r\nimport {setFavorites} from '../../store/actions/favorites'\r\n\r\nfunction MainLayout (props) {\r\n\r\n    const {search, category} = useParams();\r\n    \r\n    const location = useLocation();\r\n\r\n     //read favorites from localstorage and save it in store\r\n     useEffect(_ => {\r\n        let favorites = localStorage.getItem('favorites');\r\n        favorites = favorites ? JSON.parse(favorites) : [];\r\n        props.setFavorites(favorites);\r\n    },[])\r\n\r\n    //save favorites to the local storage each time they change\r\n    useEffect(_ => {\r\n        localStorage.setItem('favorites', JSON.stringify(props.favorites.gameIds))\r\n    }, [props.favorites.gameIds])\r\n\r\n    useEffect(()=>{\r\n        console.log(props.favorites.gameIds)\r\n        //getting games list from json file and storing in store\r\n        const getGamesList = () => {\r\n            fetch(`${window.location.origin}/gamesList.json`, {\r\n                headers : { \r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }\r\n            })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if(search){\r\n                    props.setSearchedData(res, search)\r\n                } else if (location.pathname === '/favorites'){                    \r\n                    props.setFavoritesData(res, props.favorites)\r\n                } else {\r\n                    props.setGamesData(res, category)\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n    \r\n        }\r\n        getGamesList()\r\n    }, [location.pathname, props.favorites])\r\n\r\n    return (\r\n        <Grid container >\r\n            <Sidebar />\r\n            {props.children}\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    gamesDataLoading: () => dispatch(gamesDataLoading),\r\n    setGamesData: (data, category) => dispatch(setGamesData(data, category)),\r\n    setFavorites: data => dispatch(setFavorites(data)),\r\n    setFavoritesData: (data, favorites) => dispatch(setFavoritesData(data, favorites)).favorites,\r\n    setSearchedData: (data, search) => dispatch(setSearchedData(data, search))\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MainLayout);","import {ACTION_TYPES} from '../actionTypes'\r\n\r\nexport const setFavorites = data => (\r\n    {\r\n        type: ACTION_TYPES.SET_FAVORITES,\r\n        payload: data\r\n    }\r\n)\r\nexport const toggleFavorite = id => (\r\n    {\r\n        type: ACTION_TYPES.TOGGLE_FAVORITE,\r\n        payload: id\r\n    }\r\n)\r\n","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    homeContainer: {\r\n        flex: 1,\r\n        marginLeft:20,\r\n        marginRight: 20,\r\n        display: 'flex',\r\n        marginTop:20,\r\n        alignItems: 'flex-start',\r\n        background: '#383838',\r\n        padding: 4,\r\n        '@media only screen and (max-width:992px)': {\r\n            flexDirection: 'column'\r\n        },\r\n    },\r\n    large: {\r\n        width: '50%',\r\n        display: 'flex',\r\n        alignItems: 'flex-start',\r\n        flexWrap: 'wrap',\r\n        '@media only screen and (max-width:992px)': {\r\n            width: '100%'\r\n        },\r\n    },\r\n    singlelarge: {\r\n        width:'25%'\r\n    },\r\n    gameLargeImg: {\r\n        width: '-webkit-fill-available',\r\n        display: 'block',\r\n        flexGrow:1,\r\n        border: '4px solid #383838',\r\n        boxSizing: 'border-box'\r\n    },\r\n    small: {\r\n        width: '50%',\r\n        display: 'flex',\r\n        alignItems: 'flex-start',\r\n        flexWrap: 'wrap',\r\n        '@media only screen and (max-width:992px)': {\r\n            width: '100%'\r\n        },\r\n    },\r\n    gameSmallImg: {\r\n        display: 'block',\r\n        flexGrow:1,\r\n        border: '4px solid #383838',\r\n        boxSizing: 'border-box',\r\n        width: '-webkit-fill-available',\r\n        \r\n    },\r\n    gameName: {\r\n        position: 'absolute',\r\n        bottom:5,\r\n        color: 'white',\r\n        left:6,\r\n        fontSize: 12\r\n    },\r\n    singlelarge: {\r\n        position: 'relative'\r\n    },\r\n    smallImgWrapper: {\r\n        position: 'relative',\r\n        maxWidth:'25%',\r\n        flexGrow:1,\r\n        '@media only screen and (max-width:992px)': {\r\n            maxWidth: 'unset',\r\n            minWidth: '25%',\r\n            flexGrow:1\r\n        },\r\n    },\r\n    largeImgWrapper: {\r\n        position: 'relative',\r\n        width: '50%'\r\n    },\r\n    \r\n    favoriteIcon: {\r\n        position: 'absolute',\r\n        top:10,\r\n        right:10,\r\n        width:16,\r\n        opacity: 0.7,\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            opacity: 1\r\n        }\r\n    },\r\n\r\n})","import { makeStyles } from '@material-ui/core';\r\n\r\nexport const useStyles = makeStyles({\r\n    large: {\r\n        width: '50%',\r\n        display: 'flex',\r\n        alignItems: 'flex-start',\r\n        flexWrap: 'wrap',\r\n        '@media only screen and (max-width:992px)': {\r\n            width: '100%'\r\n        },\r\n    },\r\n    singlelarge: {\r\n        width:'25%',\r\n        position:'relative'\r\n    },\r\n    gameLargeImg: {\r\n        width: '-webkit-fill-available',\r\n        display: 'block',\r\n        flexGrow:1,\r\n        border: '4px solid #383838',\r\n        boxSizing: 'border-box'\r\n    },\r\n    small: {\r\n        width: '50%',\r\n        display: 'flex',\r\n        alignItems: 'flex-start',\r\n        flexWrap: 'wrap',\r\n        '@media only screen and (max-width:992px)': {\r\n            width: '100%'\r\n        },\r\n    },\r\n    gameSmallImg: {\r\n        display: 'block',\r\n        flexGrow:1,\r\n        border: '4px solid #383838',\r\n        boxSizing: 'border-box',\r\n        width: '-webkit-fill-available',\r\n        \r\n    },\r\n    gameName: {\r\n        position: 'absolute',\r\n        bottom:5,\r\n        color: 'white',\r\n        left:6,\r\n        fontSize: 12\r\n    },\r\n    smallImgWrapper: {\r\n        position: 'relative',\r\n        maxWidth:'25%',\r\n        flexGrow:1,\r\n        '@media only screen and (max-width:992px)': {\r\n            maxWidth: 'unset',\r\n            minWidth: '25%',\r\n            flexGrow:1\r\n        },\r\n    },\r\n    largeImgWrapper: {\r\n        position: 'relative',\r\n        width: '50%'\r\n    },\r\n    \r\n    favoriteIcon: {\r\n        position: 'absolute',\r\n        top:10,\r\n        right:10,\r\n        width:16,\r\n        opacity: 0.9,\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            opacity: 1\r\n        }\r\n    },\r\n    filteredClass: {\r\n        minWidth: '25%',\r\n        position: 'relative',\r\n        flexGrow:1\r\n    }\r\n\r\n})","import React from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {useStyles} from './GameItem.style';\r\nimport {toggleFavorite} from '../../store/actions/favorites'\r\n\r\nfunction GameItem (props){\r\n    const {wrapperClass, isLarge, game} = props\r\n    const classes = useStyles();\r\n    const favorites = props.favorites.gameIds;\r\n    const handleFavoritesClick = id => {\r\n        \r\n        props.toggleFavorite(id);\r\n    }\r\n\r\n    return (\r\n        <div className={wrapperClass}>    \r\n            <img \r\n                className={isLarge ? classes.gameLargeImg : classes.gameSmallImg} \r\n                alt={game.name} \r\n                src={`/assets/${isLarge ? game.img.large : game.img.small}`} />\r\n            <span className={classes.gameName}>{game.name}</span>\r\n            <img \r\n                className={classes.favoriteIcon} \r\n                src={`/assets/icons/${favorites.includes(game.id) ? 'icon-favorites-active.svg' : 'icon-favorites-noactive.svg'}`} \r\n                alt='favorite'\r\n                onClick={_ => handleFavoritesClick(game.id)}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    ...state,\r\n    favorites: state.favorites\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toggleFavorite: id => dispatch(toggleFavorite(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameItem)","import GameItem from './GameItem'\r\n\r\nexport default GameItem;","import React from 'react'\r\nimport uuid from 'react-uuid'\r\nimport {connect} from 'react-redux';\r\nimport {useStyles} from './Home.style';\r\nimport GameItem from '../../components/GemeItem'\r\n\r\nfunction Home (props) {\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.homeContainer}>\r\n            {!props.isLoading &&\r\n                <>\r\n                    <div className={props.games.large.length > 1 ? classes.large : classes.singlelarge}>\r\n                        {props.games.large.map(game => (\r\n                            <GameItem\r\n                                key={uuid()}\r\n                                game={game} \r\n                                isLarge={true}\r\n                                wrapperClass={props.games.large.length === 1 ? classes.singlelargeWrapper : classes.largeImgWrapper}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                \r\n                    <div className={classes.small}>\r\n                        {props.games.small.map(game => (\r\n                            <GameItem\r\n                                key={uuid()}\r\n                                game={game} \r\n                                isLarge={false}\r\n                                wrapperClass={classes.smallImgWrapper}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => (\r\n    {\r\n        games: state.gameInfo.games,\r\n        categories: state.gameInfo.categories,\r\n        isLoading: state.gameInfo.is_loading,\r\n    }\r\n);\r\n\r\nexport default connect(mapStateToProps)(Home);","import Home from './Home'\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Switch} from 'react-router-dom';\r\nimport {AppRouter} from './components/AppRouter/AppRouter';\r\nimport MainLayout from './components/layouts/MainLayout';\r\nimport Home from './views/Home'\r\n\r\nexport const Routers = _ => {\r\n    return (\r\n        <Switch>\r\n            <AppRouter exact path='/' layout={MainLayout} component={Home}/>\r\n\r\n            <AppRouter path='/category/:category' layout={MainLayout} component={Home}/>\r\n            \r\n            <AppRouter path='/search/:search' layout={MainLayout} component={Home}/>\r\n            \r\n            <AppRouter path='/favorites' layout={MainLayout} component={Home}/>\r\n        </Switch>\r\n    )\r\n}","import {ACTION_TYPES} from '../actionTypes'\r\n\r\nexport const initialState = {\r\n    is_loading: true,\r\n    games: [],\r\n    categories: []\r\n};\r\n\r\nexport const GamesReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ACTION_TYPES.GAMES_DATA_LOADING:\r\n            return {\r\n                ...state,\r\n                is_loading: true\r\n            };\r\n\r\n        case ACTION_TYPES.SET_GAMES_DATA:\r\n            const data = action.payload.data;\r\n            const categoryName = action.payload.category ? action.payload.category: 'All games';\r\n            const [category] = data.categories.filter(cat => cat.nameKey === categoryName);\r\n\r\n            // get game details for chosen category\r\n            const games = category.games.map(item => {\r\n                let [gameData] = data.games.filter(game => (\r\n                   game.id === item.id\r\n                ))\r\n                gameData.top = item.top\r\n                return gameData;\r\n            });\r\n\r\n            //keep large and small images separately\r\n            const largeGames = [];\r\n            const smallGames = [];\r\n            games.forEach(game => {\r\n                if(game.top){\r\n                    largeGames.push(game);\r\n                } else {\r\n                    smallGames.push(game);\r\n                }\r\n            });\r\n\r\n            // get category names\r\n            const categories = data.categories.map(cat => (\r\n                {\r\n                    id: cat.id,\r\n                    nameKey: cat.nameKey\r\n                }\r\n            ))\r\n\r\n            return {\r\n                is_loading: false,\r\n                games: {\r\n                    small: smallGames,\r\n                    large: largeGames,\r\n                },\r\n                categories,\r\n                allData: action.payload.data\r\n            };\r\n\r\n        case ACTION_TYPES.SET_FAVORITES_DATA:\r\n            const favData = action.payload.data;\r\n            const [favCategory] = favData.categories.filter(cat => cat.nameKey === 'All games');\r\n\r\n            // get game details from categories category\r\n            let favGames = favCategory.games.map(item => {\r\n                let [gameData] = favData.games.filter(game => (\r\n                   game.id === item.id\r\n                ))\r\n                gameData.top = item.top\r\n                return gameData;\r\n            });\r\n\r\n            //get favorite game details\r\n            favGames = action.payload.favorites.gameIds.map(id => {\r\n                let [favGameData] = favData.games.filter(game => (\r\n                game.id === id\r\n                ))\r\n                return favGameData;\r\n            });\r\n\r\n            //keep large and small images separately\r\n            const favLargeGames = [];\r\n            const favSmallGames = [];\r\n            favGames.forEach(game => {\r\n                if(game.top){\r\n                    favLargeGames.push(game);\r\n                } else {\r\n                    favSmallGames.push(game);\r\n                }\r\n            });\r\n\r\n            // get category names\r\n            const favCategories = favData.categories.map(cat => (\r\n                {\r\n                    id: cat.id,\r\n                    nameKey: cat.nameKey\r\n                }\r\n            ))\r\n\r\n            return {\r\n                is_loading: false,\r\n                games: {\r\n                    small: favSmallGames,\r\n                    large: favLargeGames,\r\n                },\r\n                categories: favCategories,\r\n                allData: action.payload.data\r\n            };\r\n        case ACTION_TYPES.SET_SEARCHED_DATA:\r\n            const searchedData = action.payload.data;\r\n            console.log(action.payload.searchedGame, 30)\r\n            const [searchedCategory] = searchedData.categories.filter(cat => cat.nameKey === 'All games');\r\n\r\n            // get game details from categories category\r\n            let searchedGames = searchedCategory.games.map(item => {\r\n                let [gameData] = searchedData.games.filter(game => (\r\n                   game.id === item.id\r\n                ))\r\n                gameData.top = item.top\r\n                return gameData;\r\n            });\r\n\r\n            searchedGames = searchedGames.filter(game => (\r\n\r\n                game.name.toLowerCase().indexOf(action.payload.search.toLowerCase()) !== -1\r\n            ))\r\n\r\n            console.log(searchedGames, 524968484684847)\r\n            // get game details from categories category\r\n            // let searchedGames = searchedCategory.games.map(item => {\r\n            //     let [gameData] = searchedData.games.filter(game => (\r\n            //        game.id === item.id\r\n            //     ))\r\n            //     gameData.top = item.top\r\n            //     return gameData;\r\n            // });\r\n\r\n            //get searched game details\r\n            // searchedGames = action.payload.favorites.gameIds.map(id => {\r\n            //     let [favGameData] = favData.games.filter(game => (\r\n            //     game.id === id\r\n            //     ))\r\n            //     // favGameData.top = item.top\r\n            //     return favGameData;\r\n            // });\r\n\r\n            // keep large and small images separately\r\n            const searchLargeGames = [];\r\n            const searchSmallGames = [];\r\n            searchedGames.forEach(game => {\r\n                if(game.top){\r\n                    searchLargeGames.push(game);\r\n                } else {\r\n                    searchSmallGames.push(game);\r\n                }\r\n            });\r\n\r\n            // get category names\r\n            const searchedCategories = searchedData.categories.map(cat => (\r\n                {\r\n                    id: cat.id,\r\n                    nameKey: cat.nameKey\r\n                }\r\n            ))\r\n\r\n            return {\r\n                is_loading: false,\r\n                games: {\r\n                    small: searchLargeGames,\r\n                    large: searchSmallGames,\r\n                },\r\n                categories: searchedCategories,\r\n                allData: action.payload.data\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n","import {ACTION_TYPES} from '../actionTypes'\r\n\r\nexport const initialState = {    \r\n    gameIds: [],\r\n};\r\n\r\nexport const FavoritesReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case ACTION_TYPES.SET_FAVORITES:\r\n            return {\r\n                gameIds: action.payload\r\n            };\r\n            \r\n        case ACTION_TYPES.TOGGLE_FAVORITE:\r\n\r\n            const gameId = action.payload;\r\n            \r\n            let newFavorites = [];\r\n\r\n            if(state.gameIds.includes(gameId)){\r\n                //remove from favorites\r\n                newFavorites = state.gameIds.filter(game_id => game_id !== gameId)\r\n            } else {\r\n                //add to favorites\r\n                newFavorites = [...state.gameIds, gameId]\r\n            }\r\n\r\n            return {\r\n                gameIds: newFavorites\r\n            };           \r\n        default:\r\n            return state\r\n    }\r\n};","import { combineReducers } from 'redux'\r\nimport {GamesReducer} from './GamesReducer'\r\nimport {FavoritesReducer} from './FavoritesReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    gameInfo: GamesReducer,\r\n    favorites: FavoritesReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer'\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nimport {Routers} from './routers' \nimport { store } from './store/store'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n          <Routers/>\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}